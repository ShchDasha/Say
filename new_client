#include <iostream>
#include <string>
#include <thread>
#include <winsock2.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")
std::string xorEncryptDecrypt(const std::string& input, const std::string& key)
{
    std::string output = input;    
    for (size_t i = 0; i < input.size(); ++i)
        output[i] = input[i] ^ key[i % key.size()];
    return output;
}
void receiveMessages(SOCKET socket, const std::string& key)
{
    char buffer[1024];    
    while (true)
    {
        int bytesReceived = recv(socket, buffer, sizeof(buffer), 0);
        if (bytesReceived <= 0)
        {
            std::cerr << "Connection lost or error occurred." << std::endl;
            break;
        }
        std::string encryptedMessage(buffer, bytesReceived);
        std::string decryptedMessage = xorEncryptDecrypt(encryptedMessage, key);
        std::cout << "Received message: " << decryptedMessage << std::endl;
    }
}
int main()
{
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
    {
        std::cerr << "WSAStartup failed." << std::endl;
        return 1;
    }
    std::string key;
    std::cout << "Enter encryption key: ";
    std::getline(std::cin, key);
    if (key.empty())
    {
        std::cerr << "Error: Encryption key cannot be empty." << std::endl;
        WSACleanup();
        return 1;
    }
    SOCKET clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == INVALID_SOCKET)
    {
        std::cerr << "Socket creation failed." << std::endl;
        WSACleanup();
        return 1;
    }
    sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(12345);
    inet_pton(AF_INET, "127.0.0.1", &serverAddr.sin_addr);
    if (connect(clientSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
    {
        std::cerr << "Connection to server failed. Is server running?" << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return 1;
    }
    std::cout << "Connected to server. You can start chatting." << std::endl;
    std::thread receiverThread(receiveMessages, clientSocket, key);
    std::string message;
    while (true)
    {
        std::getline(std::cin, message);    
        if (message.empty()) continue;
        std::string encryptedMessage = xorEncryptDecrypt(message, key);
        send(clientSocket, encryptedMessage.c_str(), encryptedMessage.size(), 0);
    }
    receiverThread.join();
    closesocket(clientSocket);
    WSACleanup();
    return 0;
}
